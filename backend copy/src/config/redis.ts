import Redis from 'ioredis';
import { env } from './env';

// Redis baƒülantƒ± URL'i environment variable'dan gelecek
const redisUrl = process.env.REDIS_URL;
export const CACHE_TTL = env.REDIS_CACHE_TTL;

if (!redisUrl) {
  throw new Error('Redis URL is not set in environment variables');
}

export const redis = new Redis(redisUrl, {
  tls: {
    rejectUnauthorized: false // SSL sertifika doƒürulamasƒ±nƒ± devre dƒ±≈üƒ± bƒ±rak
  },
  // Optimize Redis connection settings
  connectTimeout: 20000,         // 20 saniye baƒülantƒ± zaman a≈üƒ±mƒ± (varsayƒ±lan 10s)
  commandTimeout: 10000,         // 10 saniye komut zaman a≈üƒ±mƒ±
  maxRetriesPerRequest: 3,       // 3 kez yeniden deneme
  enableOfflineQueue: true,      // √áevrimdƒ±≈üƒ±yken komutlarƒ± sƒ±rala
  autoResubscribe: true,         // Otomatik olarak kanal aboneliklerini yeniden olu≈ütur
  autoResendUnfulfilledCommands: true,  // Yerine getirilmemi≈ü komutlarƒ± otomatik olarak tekrar g√∂nder
  enableReadyCheck: false,       // Upstash Redis i√ßin √∂nemli
  retryStrategy(times) {
    // √ústel geri √ßekilme ile yeniden deneme: her ba≈üarƒ±sƒ±z denemede daha uzun bekle
    const delay = Math.min(Math.exp(times) * 100, 10000); // max 10 saniye
    console.log(`‚è≥ Redis baƒülantƒ± hatasƒ±, ${delay}ms sonra yeniden denenecek (deneme: ${times})`);
    return delay;
  },
  reconnectOnError: (err) => {
    const targetErrors = ['READONLY', 'ETIMEDOUT', 'ECONNREFUSED', 'ENOTFOUND', 'SELF_SIGNED_CERT_IN_CHAIN'];
    const shouldReconnect = targetErrors.some(e => err.message.includes(e));
    if (shouldReconnect) {
      console.log(`üîÑ Redis baƒülantƒ± hatasƒ± nedeniyle yeniden baƒülanƒ±lƒ±yor: ${err.message}`);
    }
    return shouldReconnect;
  },
  connectionName: `veciz_ai_${env.NODE_ENV}_${Math.floor(Math.random() * 1000)}`,
  showFriendlyErrorStack: true, // Geli≈ütirme sƒ±rasƒ±nda hata ayrƒ±ntƒ±larƒ±nƒ± g√∂ster
});

// Redis connection events
redis.on('error', (error) => {
  console.error('‚ùå Redis connection error:', error);
});

redis.on('connect', async () => {
  console.log('‚úÖ Redis connected');
  // Log level ayarlama kodu kaldƒ±rƒ±ldƒ±
});

redis.on('ready', () => {
  console.log('‚úÖ Redis ready');
});

redis.on('close', () => {
  console.log('üîÑ Redis connection closed');
});

redis.on('reconnecting', (timeToReconnect: number) => {
  console.log(`‚è≥ Redis reconnecting in ${timeToReconnect}ms...`);
});

export default redis;
